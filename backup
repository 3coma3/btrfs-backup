#!/bin/bash

# CONFIG START -----------------------------------------------------------------

# file globs with paths to back up
declare -a sources=()
sources+=('/etc')
sources+=('/home/user/'{b*,d*,m*,p*,s*,t*,v*,wo*})
sources+=('/home/user/'.{bash,cinnamon,config,dmrc,fzf*,g{conf,i{mp,t*},n{ome,upg},tkrc*},icons,l{inuxmint,ocal},m{ozilla,ysql},p{rofile,utty},ssh,th{emes,underbird},vim*})
sources+=('/var/lib/libvirt/images')

# btrfs volume for the backup, you should let this script create it
destination='/media/user/BKP/snaps'

# snapshots to keep per level (min=1), snapshots may evaluate to many levels
declare -A retention=( [leafs]=15 [days]=7 [weeks]=8 [months]=6 [years]=2 )

# 1=mon, 7=sun - used in the weekly retention checks
weekstart=7

# can be set by passing -d on the command line, or hardcode here to ex. 'echo'
dryrun=''

# CONFIG END -------------------------------------------------------------------

_snap() {
    echo -e "\nBACKING UP ===="

    local base serial="$(date +%Y/%m/%d/%H%M%S)"

    if [[ ! -d "$destination" ]]; then
        # if this is the first snapshot we need to create the base subvolume
        $dryrun btrfs subvolume create "$destination"
        base="$destination"
    else
        # otherwise the base is the last snapshot under the base subvolume
        base="$destination/$(sudo btrfs subvolume list -os --sort=gen "$destination" | sed -nr '$s/^[^\/]+\/(.*)$/\1/p')"
    fi

    # create subtree for the new snapshot (yy/mm/dd branches)
    $dryrun mkdir -vp "$destination/${serial%/*}"

    # add leaf (hhmmss) as a snapshot, based on $base
    $dryrun btrfs subvolume snapshot "$base" "$destination/$serial"

    # remove from the first snapshot the copy of the initial subtree in the base
    [[ "$base" == "$destination" ]] && $dryrun rm -rfv "$destination/$serial/${serial%/*}"

    # expand the source definitions to a list
    shopt -s extglob

    # update the new snapshot
    for source in "${sources[@]}"; do
        echo -e "\nBACKING UP $source ..."
        $dryrun rsync -aHAXERhv --progress --numeric-ids --inplace --no-whole-file --delete-delay --force "$source" "$destination/$serial"
    done
}

_clean() {
    echo -e "\nCLEANING UP ===="

    local y m d s cd=0 cw=0 cm=0 cy=0 dow clean=false cleaned=0 rest str
    while IFS='/' read rest y m d s; do
        # check retention over leaf snapshot counter
        (( clean = retention[leafs]-- < 1 ))

        # check retention when the day has changed
        (( 10#$cd != 10#$d && (cd = 10#$d, clean &= retention[days]-- < 1) ))

        # if we are more than 6 days before the previous last day of week (cw),
        # the week has changed, so check week retention
        [[ "$cw" == "0" ]] || (( $(date -d "$cw UTC" +%s) - $(date -d "$y/$m/$d UTC" +%s) / (60 * 60 * 24) > 6 )) \
        && (( clean &= retention[weeks]-- < 1 ))

        # get last day for the week of the snapshot
        cw=$(date -d "$y/$m/$d -$(date -d $y/$m/$d +%u) days +$weekstart day" +"%F")

        # month retention
        (( 10#$cm != 10#$m && (cm = 10#$m, clean &= retention[months]-- < 1) ))

        # year retention
        (( 10#$cy != 10#$y && (cy = 10#$y, clean &= retention[years]-- < 1) ))

        (( clean )) && {
            $dryrun btrfs subvolume delete "$destination/$y/$m/$d/$s"

            # clean empty subtree
            # output will be inaccurate in dry mode as we can't remove parents
            for dir in "$destination/"{$y/$m/$d,$y/$m,$y}; do
                [[ -z "$(ls -A "$dir")" ]] && $dryrun rmdir -v "$dir"
            done

            (( cleaned++ ))
        }
    done< <(cd "$destination" ; find . -maxdepth 4 -mindepth 4 -type d | sort -dr)

    (( cleaned == 1 )) && str=" was" || str="s were" 
    echo "$cleaned snapshot$str cleaned."
}

go() {
    [[ -z "$@" || "$@" == "-d" ]] && {
        echo "please specify an action" ; exit 1
    }

    local -a actions=()

    # actions are just the name of the functions starting with _, minus the _
    # tokens can be chained (ex: backup clean snap, backup snap clean)
    for token in $@; do
        case $token in
            snap|clean) actions[${actions[@]}]=_$token ;;
                    -d) dryrun='echo' ;;
                    -*) echo "invalid option" ; exit 1 ;;
                     *) echo "actions are either 'snap' or 'clean'" ; exit 1 ;;
        esac
    done

    for action in ${actions[@]}; do $action; done
}

go $@
